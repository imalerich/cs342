#lang racket
(provide (all-defined-out))

;; This is for eval
(define prog2
  '(var ((x z) (y (+ x 1)))
	(+ x y)
))

;; Sample Run: Returns 21
;; (eval prog2 '((z 10)))

;; Sample Run: Returns '(Cannot Evaluate)
;; (eval prog2 '()))

;; True
(define var0 'x)

;; False
(define var0 '(x))

;; False
(define var0 '(3))

;; True
(define varassign0
  '((x 3) (y 2) (z 6))
)

;; True
(define varassign1
  '((x 3))
)

;; True
(define varassign2
  '()
)

;; False
(define varassign3
  '((x 3 2))
)

;; False
(define varassign4
  '((x 3) 4)
)
